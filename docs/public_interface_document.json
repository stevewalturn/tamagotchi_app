{
  "package_name": "com.steve_os.tamagotchi_app",
  "project_description": "The Tamagotchi app is a pet-raising simulation application built using Flutter. Users can create and care for a virtual pet, monitoring its happiness, hunger, energy, and cleanliness levels. The app features a pet detail screen where users can interact with their pet by feeding, playing, and cleaning it. The pet can also evolve through different life stages as the user provides care. The application follows the Stacked architecture, utilizing state management, routing, and dependency injection provided by the Stacked package.",
  "architecture_overview": "The Tamagotchi app uses the Stacked architecture, which separates the application into distinct layers: app setup, features, UI components, and utilities. The app setup layer defines the overall app structure, including routes, dependencies, bottom sheets, and dialogs. The features layer contains the main screens and view models, such as the HomeView, StartupView, and PetDetailView. The UI components layer provides reusable widgets like PetAnimation, PetStatsDisplay, and PetActionButtons. The utilities layer includes shared services, models, and other cross-cutting concerns.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/services/notification_service.dart",
      "description": "The NotificationService class is responsible for managing and displaying local notifications within the Tamagotchi app. It handles the initialization of the notification system, checks the pet's needs, and triggers appropriate notifications to alert the user.",
      "class_diagram": "@startuml\nclass NotificationService {\n  - FlutterLocalNotificationsPlugin _notifications\n  - bool _isInitialized\n  \n  + initialize()\n  + checkAndNotifyPetNeeds(Pet pet)\n  + notifyEvolution(String petName)\n  - _showNotification(title, body)\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the notification system with the appropriate Android and iOS settings.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "checkAndNotifyPetNeeds",
          "description": "Checks the pet's needs and triggers a notification if the pet requires attention.",
          "parameters": [
            "Pet pet"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "notifyEvolution",
          "description": "Displays a notification when the pet is evolving.",
          "parameters": [
            "String petName"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "_showNotification",
          "description": "Displays a local notification with the provided title and body.",
          "parameters": [
            "String title",
            "String body"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "flutter_local_notifications/flutter_local_notifications.dart",
        "tamagotchi_app/models/pet.dart"
      ]
    },
    {
      "name": "lib/features/pet_detail/pet_detail_view.dart",
      "description": "The `PetDetailView` is responsible for displaying the detailed information and interactive features for a specific pet within the Tamagotchi application. It serves as the main view for users to interact with and care for their virtual pet.",
      "class_diagram": "@startuml\nclass PetDetailView {\n  +builder(BuildContext, PetDetailViewModel, Widget): Widget\n  +viewModelBuilder(BuildContext): PetDetailViewModel\n  +onViewModelReady(PetDetailViewModel): void\n}\n\nclass PetDetailViewModel {\n  +hasPet: bool\n  +pet: Pet\n  +stats: PetStats\n  +hasError: bool\n  +modelError: Exception\n  +isBusy: bool\n  +updatePetStats(): void\n  +feedPet(): Future<void>\n  +playWithPet(): Future<void>\n  +cleanPet(): Future<void>\n  +getAgeDisplay(): String\n}\n\nPetDetailView o-- PetDetailViewModel\nPetDetailView ..> PetAnimation\nPetDetailView ..> PetStatsDisplay\nPetDetailView ..> PetActionButtons\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the PetDetailView, including the pet's information, animation, stats, and action buttons.",
          "parameters": [
            "BuildContext",
            "PetDetailViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the PetDetailViewModel to be used by the view.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetDetailViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the PetDetailViewModel is ready, triggering the initial update of the pet's stats.",
          "parameters": [
            "PetDetailViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:stacked/stacked.dart",
        "package:tamagotchi_app/features/pet_detail/widgets/pet_action_buttons.dart",
        "package:tamagotchi_app/features/pet_detail/widgets/pet_animation.dart",
        "package:tamagotchi_app/features/pet_detail/widgets/pet_stats_display.dart",
        "package:tamagotchi_app/ui/themes/app_theme.dart",
        "pet_detail_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/pet_detail/pet_detail_viewmodel.dart",
      "description": "This file contains the PetDetailViewModel class, which is responsible for managing the state and behavior of the Pet Detail screen in the Tamagotchi app. It provides the core functionality for interacting with a pet, such as feeding, playing, and cleaning it, as well as monitoring its evolving state.",
      "class_diagram": "@startuml\nclass PetDetailViewModel {\n  + get pet(): Pet\n  + get hasPet(): bool\n  + feedPet(): Future<void>\n  + playWithPet(): Future<void>\n  + cleanPet(): Future<void>\n  + updatePetStats(): Future<void>\n  + getAgeDisplay(): String\n}\n\nPetDetailViewModel --> PetService\nPetDetailViewModel --> NotificationService\n@enduml",
      "methods": [
        {
          "name": "feedPet",
          "description": "Feeds the pet, checks for evolution, and notifies the user of the pet's needs.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "playWithPet",
          "description": "Plays with the pet, checks for evolution, and notifies the user of the pet's needs.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "cleanPet",
          "description": "Cleans the pet, checks for evolution, and notifies the user of the pet's needs.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "_checkEvolution",
          "description": "Checks if the pet can evolve and notifies the user if it can.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "updatePetStats",
          "description": "Updates the pet's statistics and notifies the user of the pet's needs.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "getAgeDisplay",
          "description": "Formats the pet's age for display.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:tamagotchi_app/app/app.locator.dart",
        "package:tamagotchi_app/models/pet.dart",
        "package:tamagotchi_app/services/pet_service.dart",
        "package:tamagotchi_app/services/notification_service.dart"
      ]
    },
    {
      "name": "lib/features/pet_detail/widgets/pet_animation.dart",
      "description": "The `PetAnimation` widget is responsible for displaying an animated pet image that bounces up and down. It is used to provide a visually engaging and interactive representation of the pet's current stage of development within the Tamagotchi-style application.",
      "class_diagram": "@startuml\nclass PetAnimation {\n  - AnimationController _controller\n  - Animation<double> _bounceAnimation\n  + PetStageType stageType\n  + bool isHappy\n  + initState()\n  + dispose()\n  + build(BuildContext): Widget\n  - _getPetImage(): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "initState",
          "description": "Initializes the animation controller and bounce animation, and starts the animation by calling `_controller.forward()`.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Disposes of the animation controller when the widget is removed from the widget tree.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the widget tree, which includes an `AnimatedBuilder` that updates the pet image's vertical position based on the bounce animation.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getPetImage",
          "description": "Returns the appropriate pet image asset based on the `stageType` and `isHappy` properties. Provides a fallback widget in case the image asset is not found.",
          "parameters": null,
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "tamagotchi_app/models/pet_stage.dart"
      ]
    },
    {
      "name": "lib/services/pet_service.dart",
      "description": "The `PetService` class is responsible for managing the core functionality of a virtual pet application, known as a Tamagotchi. It provides the main logic for creating, saving, and interacting with a user's virtual pet.",
      "class_diagram": "@startuml\nclass PetService {\n  - _currentPet: Pet\n  + get currentPet(): Pet\n  + createNewPet(name: String): Future<Pet>\n  - _savePet(pet: Pet): Future<void>\n  + feedPet(): Future<void>\n  + playWithPet(): Future<void>\n  + cleanPet(): Future<void>\n  + checkEvolution(): Future<void>\n  + updatePetStats(): Future<void>\n  - _clampValue(value: double): double\n}\n\nclass Pet {\n  + name: String\n  + stage: PetStage\n  + stats: PetStats\n  + carePoints: int\n  + lastInteraction: DateTime\n  + canEvolve: bool\n  + timeSinceLastInteraction: Duration\n  + create(name: String): Pet\n  + copyWith({name, stage, stats, carePoints, lastInteraction}): Pet\n}\n\nclass PetStats {\n  + happiness: double\n  + hunger: double\n  + energy: double\n  + cleanliness: double\n  + copyWith({happiness, hunger, energy, cleanliness}): PetStats\n}\n\nclass PetStage {\n  + type: String\n  + static getNextStage(type: String): PetStage\n}\n@enduml",
      "methods": [
        {
          "name": "createNewPet",
          "description": "Creates a new virtual pet with the given name, saves it, and sets it as the current pet.",
          "parameters": [
            "name: String"
          ],
          "return_type": "Future<Pet>"
        },
        {
          "name": "feedPet",
          "description": "Updates the current pet's hunger and energy levels, and increases the pet's care points.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "playWithPet",
          "description": "Updates the current pet's happiness, energy, and hunger levels, and increases the pet's care points.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "cleanPet",
          "description": "Updates the current pet's cleanliness and happiness levels, and increases the pet's care points.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "checkEvolution",
          "description": "Checks if the current pet can evolve to the next stage, and updates the pet's stage if true.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "updatePetStats",
          "description": "Decreases the current pet's happiness, hunger, energy, and cleanliness levels over time if the pet has not been interacted with recently.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:tamagotchi_app/models/pet.dart",
        "package:tamagotchi_app/models/pet_stage.dart",
        "package:tamagotchi_app/models/pet_stats.dart"
      ]
    },
    {
      "name": "lib/models/pet_stats.dart",
      "description": "This Dart file defines a PetStats class that represents the key attributes and status of a pet in the application. The PetStats class encapsulates the pet's happiness, health, energy, hunger, and cleanliness levels, and provides functionality to manage and update these attributes.",
      "class_diagram": "@startuml\nclass PetStats {\n  -double happiness\n  -double health\n  -double energy\n  -double hunger \n  -double cleanliness\n  +PetStats.initial()\n  +PetStats copyWith()\n  +bool needsAttention()\n  +String mostUrgentNeed()\n  +Map<String, double> toMap()\n  +PetStats.fromMap()\n}\n@enduml",
      "methods": [
        {
          "name": "PetStats.initial()",
          "description": "Factory constructor that creates a new PetStats instance with all attributes initialized to 100.",
          "parameters": null,
          "return_type": "PetStats"
        },
        {
          "name": "copyWith()",
          "description": "Returns a new PetStats instance with one or more attributes updated.",
          "parameters": [
            "double? happiness",
            "double? health",
            "double? energy",
            "double? hunger",
            "double? cleanliness"
          ],
          "return_type": "PetStats"
        },
        {
          "name": "needsAttention()",
          "description": "Checks if any of the pet's attributes are below 30, indicating that the pet requires attention.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "mostUrgentNeed()",
          "description": "Determines the pet's most urgent need by finding the attribute with the lowest value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "toMap()",
          "description": "Converts the PetStats instance to a Map, allowing it to be easily serialized and stored.",
          "parameters": null,
          "return_type": "Map<String, double>"
        },
        {
          "name": "PetStats.fromMap()",
          "description": "Factory constructor that creates a new PetStats instance from a Map.",
          "parameters": [
            "Map<String, dynamic> map"
          ],
          "return_type": "PetStats"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing of the Tamagotchi app. It defines the available routes and provides navigation services to navigate between the different views in the application.",
      "class_diagram": "@startuml\n\nclass StackedRouter {\n  + List<RouteDef> get routes\n  + Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass Routes {\n  + static const homeView: String\n  + static const startupView: String\n  + static const all: Set<String>\n}\n\ninterface NavigationService {\n  + Future navigateToHomeView()\n  + Future navigateToStartupView()\n  + Future replaceWithHomeView()\n  + Future replaceWithStartupView()\n}\n\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "tamagotchi_app/features/home/home_view.dart",
        "tamagotchi_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/models/pet.dart",
      "description": "The 'Pet' class in this file is responsible for managing the state and lifecycle of a virtual pet in a Tamagotchi-style application. It encapsulates the core data and functionality required to create, interact with, and evolve a pet over time.",
      "class_diagram": "@startuml\nclass Pet {\n  -String id\n  -String name\n  -DateTime birthday\n  -PetStage stage\n  -PetStats stats\n  -int carePoints\n  -DateTime lastInteraction\n  +Pet.create({required String name})\n  +Pet copyWith({...})\n  +bool get canEvolve\n  +int get age\n  +bool get needsAttention\n  +String get urgentNeed\n  +Duration get timeSinceLastInteraction\n  +Map<String, dynamic> toMap()\n  +factory Pet.fromMap(Map<String, dynamic> map)\n}\n@enduml",
      "methods": [
        {
          "name": "Pet.create",
          "description": "Factory method to create a new Pet instance with the specified name and initial state.",
          "parameters": [
            "required String name"
          ],
          "return_type": "Pet"
        },
        {
          "name": "copyWith",
          "description": "Creates a new Pet instance with the specified modifications to the existing properties.",
          "parameters": [
            "String? id",
            "String? name",
            "DateTime? birthday",
            "PetStage? stage",
            "PetStats? stats",
            "int? carePoints",
            "DateTime? lastInteraction"
          ],
          "return_type": "Pet"
        },
        {
          "name": "canEvolve",
          "description": "Determines whether the pet has accumulated enough care points to evolve to the next life stage.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "age",
          "description": "Calculates the age of the pet in days.",
          "parameters": null,
          "return_type": "int"
        },
        {
          "name": "needsAttention",
          "description": "Checks if the pet's stats indicate that it requires attention from the user.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "urgentNeed",
          "description": "Retrieves the most urgent need of the pet based on its current stats.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "timeSinceLastInteraction",
          "description": "Calculates the duration since the last time the user interacted with the pet.",
          "parameters": null,
          "return_type": "Duration"
        },
        {
          "name": "toMap",
          "description": "Converts the Pet instance to a Map<String, dynamic> representation, suitable for storage or serialization.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromMap",
          "description": "Factory method to create a Pet instance from a Map<String, dynamic> representation.",
          "parameters": [
            "Map<String, dynamic> map"
          ],
          "return_type": "Pet"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart",
        "package:tamagotchi_app/models/pet_stage.dart",
        "package:tamagotchi_app/models/pet_stats.dart"
      ]
    },
    {
      "name": "lib/models/pet_stage.dart",
      "description": "The `PetStage` class is responsible for managing the different stages of a pet's life cycle in a pet-raising or pet-simulation application. It encapsulates the key properties and behaviors associated with each stage of a pet's development, providing a consistent and reusable model for managing the pet's progress and state.",
      "class_diagram": "@startuml\nclass PetStage {\n  +type: PetStageType\n  +name: String\n  +requiredCarePoints: int\n  +description: String\n  +evolutionThreshold: double\n  +PetStage.initial()\n  +copyWith()\n  +props: List<Object?>\n  +getAllStages(): List<PetStage>\n  +getNextStage(PetStageType): PetStage\n}\n\nenum PetStageType {\n  egg, baby, child, teen, adult\n}\n@enduml",
      "methods": [
        {
          "name": "PetStage",
          "description": "Constructor for the `PetStage` class, which initializes the stage's properties.",
          "parameters": [
            "required this.type",
            "required this.name",
            "required this.requiredCarePoints",
            "required this.description",
            "required this.evolutionThreshold"
          ],
          "return_type": null
        },
        {
          "name": "PetStage.initial",
          "description": "Factory constructor that returns the initial 'Egg' stage of a pet.",
          "parameters": null,
          "return_type": "PetStage"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `PetStage` instance with one or more properties changed.",
          "parameters": [
            "PetStageType? type",
            "String? name",
            "int? requiredCarePoints",
            "String? description",
            "double? evolutionThreshold"
          ],
          "return_type": "PetStage"
        },
        {
          "name": "props",
          "description": "List of properties used for equality comparison and hashing.",
          "parameters": null,
          "return_type": "List<Object?>"
        },
        {
          "name": "getAllStages",
          "description": "Returns a list of all the predefined pet stages.",
          "parameters": null,
          "return_type": "List<PetStage>"
        },
        {
          "name": "getNextStage",
          "description": "Retrieves the next stage in the pet's life cycle, given the current stage type.",
          "parameters": [
            "PetStageType currentType"
          ],
          "return_type": "PetStage"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for managing and registering custom dialog builders for the application. It provides a centralized location to define and set up the different types of dialogs used throughout the app, ensuring a consistent and modular dialog system.",
      "class_diagram": "@startuml\nclass DialogService {\n  +registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nclass DialogType {\n  +infoAlert\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n}\n\nDialogService -right-> DialogType\nDialogService --> InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method is responsible for registering the custom dialog builders with the DialogService. It maps each DialogType to its corresponding dialog builder, which is used to create and display the appropriate dialog when requested.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up the bottom sheet UI in the application. It defines the different types of bottom sheets that can be displayed and provides a central place to register the builders for these bottom sheets.",
      "class_diagram": "@startuml\n\nclass BottomSheetType {\n  notice\n}\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass NoticeSheet {\n  + NoticeSheet(request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetType -up-> BottomSheetService : registers\nBottomSheetService -up-> NoticeSheet : creates\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the BottomSheetService with the available bottom sheet types and their corresponding builders.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of constant color values that represent the primary color palette used throughout the application's user interface. It provides a centralized location for managing the app's visual theme and ensuring consistent use of colors across different UI components.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Stacked-based Flutter application. The service locator is a central registry that allows different parts of the application to access and use shared services and dependencies.",
      "class_diagram": "@startuml\nclass StackedLocator {\n  +static instance: StackedLocator\n  +registerEnvironment(environment: String, environmentFilter: EnvironmentFilter): void\n  +registerLazySingleton(factory: () -> dynamic): void\n}\n\nStackedLocator --> BottomSheetService\nStackedLocator --> DialogService\nStackedLocator --> NavigationService\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method sets up the service locator by registering the necessary services and dependencies. It allows the application to specify the environment and environment filter for the service locator.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/features/pet_detail/widgets/pet_stats_display.dart",
      "description": "The `PetStatsDisplay` class is responsible for rendering a visual representation of a pet's current statistics, including its happiness, health, energy, hunger, and cleanliness levels. This widget is used within the pet detail screen of the Tamagotchi app to provide users with an easy-to-understand overview of their pet's well-being.",
      "class_diagram": "@startuml\nclass PetStatsDisplay {\n  +Widget build(BuildContext context)\n}\n\nclass PetStatusBar {\n  +String label\n  +double value\n  +String type\n  +Widget build(BuildContext context)\n}\n\nPetStatsDisplay o-- PetStatusBar\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetStatsDisplay` widget, displaying a set of `PetStatusBar` widgets that represent the pet's current statistics.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:tamagotchi_app/models/pet_stats.dart",
        "package:tamagotchi_app/ui/shared/pet_status_bar.dart"
      ]
    },
    {
      "name": "lib/features/pet_detail/widgets/pet_action_buttons.dart",
      "description": "This file contains the `PetActionButtons` widget, which is responsible for rendering the action buttons (Feed, Play, Clean) for a pet in a Tamagotchi-style app. The widget provides a clean and intuitive way for users to interact with their virtual pet by performing key care actions.",
      "class_diagram": "@startuml\nclass PetActionButtons {\n  + onFeed: VoidCallback\n  + onPlay: VoidCallback\n  + onClean: VoidCallback\n  + isBusy: bool\n  + build(context: BuildContext): Widget\n}\n\nclass _ActionButton {\n  + icon: IconData\n  + label: String\n  + onPressed: VoidCallback\n  + color: Color\n  + build(context: BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the PetActionButtons widget, which displays three action buttons (Feed, Play, Clean) with corresponding icons and labels.",
          "parameters": [
            "context: BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "tamagotchi_app/ui/themes/app_theme.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The AppViewModel class in this file is responsible for managing the core application state and functionality for a Flutter app. It serves as the central hub for coordinating the various features and screens of the application.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is responsible for managing the state and logic of the notice bottom sheet UI component in the application. It provides the necessary functionality to display and interact with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n    +showNoticeSheet()\n    +hideNoticeSheet()\n    +isNoticeSheetVisible() : bool\n}\n@enduml",
      "methods": [
        {
          "name": "showNoticeSheet",
          "description": "Displays the notice bottom sheet UI component.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "hideNoticeSheet",
          "description": "Hides the notice bottom sheet UI component.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "isNoticeSheetVisible",
          "description": "Checks if the notice bottom sheet UI component is currently visible.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a set of utility functions and widgets that help with common UI layout and styling tasks in a Flutter application. It serves as a centralized location for reusable UI components and responsive design helpers.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive font size for small text, based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size, based on the screen width and the provided parameters.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/name_pet_dialog/name_pet_dialog.dart",
      "description": "The `NamePetDialog` class is responsible for displaying a dialog that allows the user to input a name for their pet. This dialog is typically used in an application that allows users to manage and interact with their pets.",
      "class_diagram": "@startuml\nclass NamePetDialog {\n  +Widget build(BuildContext context)\n  -TextEditingController controller\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the NamePetDialog, which includes a text field for the user to enter a pet name, and buttons to confirm or cancel the operation.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/pet_actions/pet_actions_sheet.dart",
      "description": "This file defines the `PetActionsSheet` class, which is responsible for displaying a bottom sheet with a guide on how to care for a pet in a Tamagotchi-style application. It provides users with information on feeding, playing, and cleaning their virtual pet to keep it healthy and happy.",
      "class_diagram": "@startuml\nclass PetActionsSheet {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +Widget build(BuildContext context)\n  -Widget _buildGuideItem(IconData icon, String title, String description)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the pet care guide bottom sheet, including sections for feeding, playing, and cleaning the pet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildGuideItem",
          "description": "Builds a individual item in the pet care guide, consisting of an icon, title, and description.",
          "parameters": [
            "IconData icon",
            "String title",
            "String description"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked_services/stacked_services.dart",
        "tamagotchi_app/ui/themes/app_theme.dart"
      ]
    },
    {
      "name": "lib/features/pet_evolution/pet_evolution_viewmodel.dart",
      "description": "The PetEvolutionViewModel is responsible for managing the state and logic related to the pet evolution feature in the Tamagotchi app. It handles the display of the pet's evolution progress and provides functionality to navigate back to the main pet view.",
      "class_diagram": "@startuml\nclass PetEvolutionViewModel extends BaseViewModel {\n  - _navigationService : NavigationService\n  - _petService : PetService\n  + get pet() : Pet\n  + get hasPet() : bool\n  + get evolutionMessage() : String\n  + get congratulationsMessage() : String\n  + onContinue() : Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "get pet",
          "description": "Retrieves the current pet from the PetService.",
          "parameters": null,
          "return_type": "Pet"
        },
        {
          "name": "get hasPet",
          "description": "Indicates whether the user has a pet or not.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "get evolutionMessage",
          "description": "Generates a message to display when the pet has evolved to a new stage.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "get congratulationsMessage",
          "description": "Generates a congratulatory message to display to the user.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "onContinue",
          "description": "Navigates back to the main pet view.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:tamagotchi_app/app/app.locator.dart",
        "package:tamagotchi_app/models/pet.dart",
        "package:tamagotchi_app/services/pet_service.dart"
      ]
    },
    {
      "name": "lib/ui/shared/pet_status_bar.dart",
      "description": "The `PetStatusBar` widget is responsible for displaying the current status of a pet in a Tamagotchi-style application. It provides a visual representation of the pet's status using a progress bar and accompanying labels.",
      "class_diagram": "@startuml\nclass PetStatusBar {\n  -String label\n  -double value\n  -String type\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetStatusBar` widget, including the label, progress bar, and percentage text.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "tamagotchi_app/ui/themes/app_theme.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is a view model for an information alert dialog in a Flutter application. The primary responsibility of this class is to manage the state and behavior of the information alert dialog.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n  +void showDialog()\n  +void hideDialog()\n  +String dialogTitle\n  +String dialogMessage\n}\n@enduml",
      "methods": [
        {
          "name": "showDialog",
          "description": "Displays the information alert dialog to the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "hideDialog",
          "description": "Hides the information alert dialog from the user.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dialogTitle",
          "description": "The title of the information alert dialog.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "dialogMessage",
          "description": "The message content of the information alert dialog.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file defines an `InfoAlertDialog` class, which is responsible for displaying an information alert dialog in the Tamagotchi app. The dialog is used to convey important information to the user, such as updates or status changes within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?)\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the visual representation of the information alert dialog. It takes in the `DialogRequest` object, which contains the title and description of the alert, and displays them in a custom dialog layout.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel` class, which is used to manage the state and logic of the information alert dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "tamagotchi_app/ui/common/app_colors.dart",
        "tamagotchi_app/ui/common/ui_helpers.dart",
        "tamagotchi_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/themes/app_theme.dart",
      "description": "The `AppTheme` class defines the overall visual theme and styling for the application. It provides a centralized location to configure the app's color scheme, typography, and various UI element styles, ensuring a consistent look and feel across the entire application.",
      "class_diagram": "@startuml\nclass AppTheme {\n  + static ThemeData get lightTheme\n  + static Map<String, Color> petStatusColors\n  + static Color getStatusColor(String statType)\n  + static TextStyle get headlineStyle\n  + static TextStyle get titleStyle\n  + static TextStyle get bodyStyle\n  + static TextStyle get captionStyle\n}\n@enduml",
      "methods": [
        {
          "name": "lightTheme",
          "description": "Defines the light theme configuration for the application, including the primary color, visual density, scaffold background color, card styles, button styles, app bar styles, input field styles, progress indicator styles, and snackbar styles.",
          "parameters": null,
          "return_type": "ThemeData"
        },
        {
          "name": "petStatusColors",
          "description": "A static map that associates different pet status types (e.g., happiness, health, energy, hunger, cleanliness) with their corresponding colors.",
          "parameters": null,
          "return_type": "Map<String, Color>"
        },
        {
          "name": "getStatusColor",
          "description": "Retrieves the color associated with a given pet status type. If the status type is not found in the `petStatusColors` map, it returns a default grey color.",
          "parameters": [
            "String statType"
          ],
          "return_type": "Color"
        },
        {
          "name": "headlineStyle",
          "description": "Defines the text style for headlines throughout the application, including font size, weight, and letter spacing.",
          "parameters": null,
          "return_type": "TextStyle"
        },
        {
          "name": "titleStyle",
          "description": "Defines the text style for titles throughout the application, including font size and weight.",
          "parameters": null,
          "return_type": "TextStyle"
        },
        {
          "name": "bodyStyle",
          "description": "Defines the text style for the main body content throughout the application, including font size and letter spacing.",
          "parameters": null,
          "return_type": "TextStyle"
        },
        {
          "name": "captionStyle",
          "description": "Defines the text style for captions throughout the application, including font size and color.",
          "parameters": null,
          "return_type": "TextStyle"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class in this file is responsible for rendering a bottom sheet UI component that displays a notice or alert to the user. It provides a simple and reusable way to present important information to the user within the context of the application.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet(completer, request)\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\n\nclass NoticeSheetModel {\n}\n\nnote right of NoticeSheet\n  The NoticeSheet class is responsible for rendering the\n  bottom sheet UI and handling the business logic\n  associated with displaying a notice or alert to the user.\nend note\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the bottom sheet, including the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which handles the business logic and state management for the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "tamagotchi_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "tamagotchi_app/ui/common/app_colors.dart",
        "tamagotchi_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/features/pet_evolution/pet_evolution_view.dart",
      "description": "Auto-generated entry for lib/features/pet_evolution/pet_evolution_view.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/enums/dialog_type.dart",
      "description": "This file defines an enum called `DialogType` that represents the different types of dialogs used in the application.",
      "class_diagram": "@enums.DialogType",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/enums/bottom_sheet_type.dart",
      "description": "This file defines an enum called `BottomSheetType` which represents the different types of bottom sheets used in the application. The primary purpose of this file is to provide a centralized and consistent way of managing the various bottom sheet types in the application.",
      "class_diagram": "@startuml\n\nenum BottomSheetType {\n    notice\n}\n\n@enduml",
      "methods": [],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant PetDetailView\nparticipant PetDetailViewModel\nparticipant PetService\nparticipant NotificationService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> PetService: Create new pet\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Navigate to pet detail\nHomeView -> PetDetailView: Show pet detail\nPetDetailView -> PetDetailViewModel: Initialize\nPetDetailViewModel -> PetService: Get current pet\nPetDetailViewModel -> NotificationService: Check pet needs\nUser -> PetDetailView: Interact with pet (feed, play, clean)\nPetDetailView -> PetDetailViewModel: Handle user actions\nPetDetailViewModel -> PetService: Update pet stats\nPetDetailViewModel -> NotificationService: Check pet needs\n@enduml",
  "state_management_flow": "The Tamagotchi app uses the Stacked architecture for state management. Each view in the application has a corresponding ViewModel that handles the business logic and state for that view. The ViewModels interact with services, such as PetService and NotificationService, to manage the state of the pet and trigger updates to the UI. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access the necessary services. The state is then passed from the ViewModels to the Views, which render the UI based on the current state.",
  "navigation_flow": "The navigation in the Tamagotchi app is managed using the Stacked Router, defined in app.router.dart. The app starts with the AppView, which initializes the Stacked architecture and shows the StartupView. After the startup logic is completed, the StartupViewModel navigates to the HomeView. From the HomeView, the user can navigate to the PetDetailView to interact with their pet. The navigation between views is handled by the Stacked Router, which provides methods like `navigateTo` and `replaceWith` to manage the navigation stack."
}